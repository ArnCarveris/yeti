# This seems like a hack. Perhaps we should move everything to a "mangler?"
mangle = Proc.new do |triplet, dependency|
  configuration, platform, arch = *triplet
  suffix = [configuration, platform, {:x86 => '32', :x86_64 => '64'}.fetch(arch, arch.to_s)].join('_')
  "#{dependency}_#{suffix}"
end

project :yeti, pretty: 'Yeti' do |proj|
  # Statically link to Yeti for the (small) optimization wins.
  proj.define 'YETI_LINKAGE' => 'YETI_LINKAGE_DYNAMIC'

  # Supress all of Visual Studio's bullshit.
  # TODO(mtwilliams): Refactor into Ryb.
  proj.define '_HAS_EXCEPTIONS' => false,
              '_SCL_SECURE_NO_WARNINGS' => true,
              '_CRT_SECURE_NO_WARNINGS' => true,
              '_CRT_SECURE_NO_DEPRECATE' => true,
              '_SECURE_SCL_THROWS' => false,
              '_SILENCE_DEPRECATION_OF_SECURE_SCL_THROWS' => true,
              # See http://stackoverflow.com/questions/14363929
              '_USING_V110_SDK71_' => true

  # Suffix builds in the form: _{configuration}_{platform}_{32,64}.
   # e.g. level_editor_debug_macosx_64.app or level_editor_windows_32.exe
  proj.architecture :x86 do |arch| arch.suffix = '_32'; end
  proj.architecture :x86_64 do |arch| arch.suffix = '_64'; end
  proj.platform :windows do |platform| platform.suffix = '_windows'; end
  proj.platform :macosx do |platform| platform.suffix = '_macosx'; end
  proj.platform :linux do |platform| platform.suffix = '_linux'; end
  proj.configuration :debug do |config| config.suffix = '_debug'; end
  proj.configuration :development do |config| config.suffix = '_development'; end
  proj.configuration :release do |config| config.suffix = '_release'; end

  # # We target Windows 7 and later.
  # proj.platform :windows do |platform| platform.sdk = '7.1'; end
  # # We target Lion and later.
  # proj.platform :macosx do |platform| platform.version = '10.7'; end
  # # TODO(mtwilliams): Determine the minimum kernel we'll support.
  # proj.platform :linux do |platform| end

  proj.configuration :debug, pretty: 'Debug' do |config|
    config.define 'YETI_CONFIGURATION' => 'YETI_CONFIGURATION_DEBUG'

    config.define '_DEBUG' => true,
                  '_HAS_ITERATOR_DEBUGGING' => true,
                  '_SECURE_SCL' => true

    config.generate_debug_symbols = true
    config.link_time_code_generation = false
    config.optimize = :nothing
  end

  proj.configuration :development, pretty: 'Development' do |config|
    config.define 'YETI_CONFIGURATION' => 'YETI_CONFIGURATION_DEVELOPMENT'

    config.define 'NDEBUG' => true,
                  '_HAS_ITERATOR_DEBUGGING' => false,
                  '_SECURE_SCL' => false

    config.generate_debug_symbols = true
    config.link_time_code_generation = false
    config.optimize = :speed
  end

  proj.configuration :release, pretty: 'Release' do |config|
    config.define 'YETI_CONFIGURATION' => 'YETI_CONFIGURATION_RELEASE'

    config.define 'NDEBUG' => true,
                  '_HAS_ITERATOR_DEBUGGING' => false,
                  '_SECURE_SCL' => false

    config.generate_debug_symbols = true
    config.link_time_code_generation = true
    config.optimize = :speed
  end

  proj.library :yeti, pretty: 'Yeti' do |lib|
    lib.linkage = :dynamic

    lib.author = 'Origami Comet Games, Inc.'
    lib.description = 'A general-purpose data-driven game engine.'
    lib.license = 'Attribution based licensing.'

    lib.define '__YETI_IS_BEING_COMPILED__' => true
    lib.define '__YETI_VERSION__' => "\"\\\"#{`git rev-parse HEAD`.rstrip}\\\"\""
    lib.define '__YETI_REVISION__' => `git rev-list --count HEAD`.strip.to_i
    lib.define '__YETI_COPYRIGHT__' => "\"\\\"Copyright 2013-#{Time.new.year} Origami Comet Games, Inc. All rights reserved.\\\"\""

    lib.add_include_paths 'include/'
    lib.add_library_paths '$build/lib/', '$build/bin/'
    lib.add_binary_paths '$build/bin/'

    lib.add_include_paths '_deps/luajit/include/', '_deps/sqlite3/include/'
    lib.add_library_paths '_deps/luajit/_build/lib/', '_deps/sqlite3/_build/lib/'
    lib.add_binary_paths '_deps/luajit/_build/bin/', '_deps/sqlite3/_build/bin/'

    lib.add_source_files 'include/**/*.{h,hpp,inl}'
    lib.add_source_files 'src/**/*.{c,cc,cpp}'

    lib.platform :windows do |platform|
      platform.add_external_dependencies %w(kernel32 user32 gdi32)
    end

    lib.add_external_dependency 'luajit', mangler: mangle
    lib.add_external_dependency 'sqlite3', mangler: mangle
  end

  proj.application :runtime, pretty: 'Runtime' do |app|
    app.add_include_paths 'include/', 'runtime/include/'
    app.add_include_paths '_deps/luajit/include/', '_deps/sqlite3/include/'
    app.add_library_paths '$build/lib/', '$build/bin/'
    app.add_binary_paths '$build/bin/'

    app.add_source_files 'runtime/include/**/*.{h,hpp,inl}'
    app.add_source_files 'runtime/src/**/*.{c,cc,cpp}'

    app.add_dependency :yeti

    app.platform :windows do |platform|
      platform.add_external_dependencies %w(kernel32 user32 gdi32)
    end
  end

  proj.application :resource_compiler, pretty: 'Resource Compiler' do |app|
    app.add_include_paths 'include/', 'tools/resource_compiler/include/'
    app.add_include_paths '_deps/luajit/include/', '_deps/sqlite3/include/'
    app.add_library_paths '$build/lib/', '$build/bin/'
    app.add_binary_paths '$build/bin/'

    app.add_source_files 'tools/resource_compiler/include/**/*.{h,hpp,inl}'
    app.add_source_files 'tools/resource_compiler/src/**/*.{c,cc,cpp}'

    app.add_dependency :yeti

    app.platform :windows do |platform|
      platform.add_external_dependencies %w(kernel32 user32 gdi32)
    end
  end
end
