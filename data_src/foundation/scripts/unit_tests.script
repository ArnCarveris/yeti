-- This file is part of Butane. See README.md and LICENSE.md for details.
-- Copyright (c) 2012 Michael Williams <devbug@bitbyte.ca>

local M = {}
local tests = {}

function tests.Vec2()
  zero = Vec2()
  assert(math.abs(0 - zero.x) <= 1e-5)
  assert(math.abs(0 - zero.y) <= 1e-5)
  assert(math.abs(0 - zero:length()) <= 1e-5)
  assert(math.abs(0 - zero:magnitude()) <= 1e-5)
  one = Vec2(1, 1)
  assert(((one:length() > 1.41) and (one:length() < 1.42)))
  assert(((one:magnitude() > 1.41) and (one:length() < 1.42)))
  sum = zero + one
  assert(math.abs(1 - sum.x) <= 1e-5)
  assert(math.abs(1 - sum.y) <= 1e-5)
  diff = zero - one
  assert(math.abs(-1 - diff.x) <= 1e-5)
  assert(math.abs(-1 - diff.y) <= 1e-5)
  product = zero * one
  assert(math.abs(0 - product.x) <= 1e-5)
  assert(math.abs(0 - product.y) <= 1e-5)
  quotient = zero / one
  assert(math.abs(0 - quotient.x) <= 1e-5)
  assert(math.abs(0 - quotient.y) <= 1e-5)
  x_axis = Vec2()
  x_axis.x = 1.0
  assert(math.abs(1 - x_axis.x) <= 1e-5)
  assert(math.abs(0 - x_axis.y) <= 1e-5)
  y_axis = Vec2()
  y_axis.y = 1.0
  assert(math.abs(0 - y_axis.x) <= 1e-5)
  assert(math.abs(1 - y_axis.y) <= 1e-5)
end

function tests.Vec3()
  zero = Vec3()
  assert(math.abs(0 - zero.x) <= 1e-5)
  assert(math.abs(0 - zero.y) <= 1e-5)
  assert(math.abs(0 - zero.z) <= 1e-5)
  assert(math.abs(0 - zero:length()) <= 1e-5)
  assert(math.abs(0 - zero:magnitude()) <= 1e-5)
  one = Vec3(1, 1, 1)
  assert(((one:length() >= 1.73) and (one:length() < 1.74)))
  assert(((one:magnitude() >= 1.73) and (one:length() < 1.74)))
  sum = zero + one
  assert(math.abs(1 - sum.x) <= 1e-5)
  assert(math.abs(1 - sum.y) <= 1e-5)
  assert(math.abs(1 - sum.z) <= 1e-5)
  diff = zero - one
  assert(math.abs(-1 - diff.x) <= 1e-5)
  assert(math.abs(-1 - diff.y) <= 1e-5)
  assert(math.abs(-1 - diff.z) <= 1e-5)
  product = zero * one
  assert(math.abs(0 - product.x) <= 1e-5)
  assert(math.abs(0 - product.y) <= 1e-5)
  assert(math.abs(0 - product.z) <= 1e-5)
  quotient = zero / one
  assert(math.abs(0 - quotient.x) <= 1e-5)
  assert(math.abs(0 - quotient.y) <= 1e-5)
  assert(math.abs(0 - quotient.z) <= 1e-5)
  x_axis = Vec3()
  x_axis.x = 1.0
  assert(math.abs(1 - x_axis.x) <= 1e-5)
  assert(math.abs(0 - x_axis.y) <= 1e-5)
  assert(math.abs(0 - x_axis.z) <= 1e-5)
  y_axis = Vec3()
  y_axis.y = 1.0
  assert(math.abs(0 - y_axis.x) <= 1e-5)
  assert(math.abs(1 - y_axis.y) <= 1e-5)
  assert(math.abs(0 - y_axis.z) <= 1e-5)
  z_axis = Vec3()
  z_axis.z = 1.0
  assert(math.abs(0 - z_axis.x) <= 1e-5)
  assert(math.abs(0 - z_axis.y) <= 1e-5)
  assert(math.abs(1 - z_axis.z) <= 1e-5)
end

function tests.Vec4()
  zero = Vec4()
  assert(math.abs(0 - zero.x) <= 1e-5)
  assert(math.abs(0 - zero.y) <= 1e-5)
  assert(math.abs(0 - zero.z) <= 1e-5)
  assert(math.abs(0 - zero.w) <= 1e-5)
  assert(math.abs(0 - zero:length()) <= 1e-5)
  assert(math.abs(0 - zero:magnitude()) <= 1e-5)
  one = Vec4(1, 1, 1, 1)
  assert(math.abs(2 - one:length()) <= 1e-5)
  assert(math.abs(2 - one:magnitude()) <= 1e-5)
  sum = zero + one
  assert(math.abs(1 - sum.x) <= 1e-5)
  assert(math.abs(1 - sum.y) <= 1e-5)
  assert(math.abs(1 - sum.z) <= 1e-5)
  assert(math.abs(1 - sum.w) <= 1e-5)
  diff = zero - one
  assert(math.abs(-1 - diff.x) <= 1e-5)
  assert(math.abs(-1 - diff.y) <= 1e-5)
  assert(math.abs(-1 - diff.z) <= 1e-5)
  assert(math.abs(-1 - diff.w) <= 1e-5)
  product = zero * one
  assert(math.abs(0 - product.x) <= 1e-5)
  assert(math.abs(0 - product.y) <= 1e-5)
  assert(math.abs(0 - product.z) <= 1e-5)
  assert(math.abs(0 - product.w) <= 1e-5)
  quotient = zero / one
  assert(math.abs(0 - quotient.x) <= 1e-5)
  assert(math.abs(0 - quotient.y) <= 1e-5)
  assert(math.abs(0 - quotient.z) <= 1e-5)
  assert(math.abs(0 - quotient.w) <= 1e-5)
  x_axis = Vec4()
  x_axis.x = 1.0
  assert(math.abs(1 - x_axis.x) <= 1e-5)
  assert(math.abs(0 - x_axis.y) <= 1e-5)
  assert(math.abs(0 - x_axis.z) <= 1e-5)
  assert(math.abs(0 - x_axis.w) <= 1e-5)
  y_axis = Vec4()
  y_axis.y = 1.0
  assert(math.abs(0 - y_axis.x) <= 1e-5)
  assert(math.abs(1 - y_axis.y) <= 1e-5)
  assert(math.abs(0 - y_axis.z) <= 1e-5)
  assert(math.abs(0 - y_axis.w) <= 1e-5)
  z_axis = Vec4()
  z_axis.z = 1.0
  assert(math.abs(0 - z_axis.x) <= 1e-5)
  assert(math.abs(0 - z_axis.y) <= 1e-5)
  assert(math.abs(1 - z_axis.z) <= 1e-5)
  assert(math.abs(0 - z_axis.w) <= 1e-5)
  w_axis = Vec4()
  w_axis.w = 1.0
  assert(math.abs(0 - w_axis.x) <= 1e-5)
  assert(math.abs(0 - w_axis.y) <= 1e-5)
  assert(math.abs(0 - w_axis.z) <= 1e-5)
  assert(math.abs(1 - w_axis.w) <= 1e-5)
end

function tests.Quat()
  rawset(Quat, "__eq", function (q1, q2)
    if (math.abs(q1.w - q2.w) > 1e-5) then return false end
    if (math.abs(q1.x - q2.x) > 1e-5) then return false end
    if (math.abs(q1.y - q2.y) > 1e-5) then return false end
    if (math.abs(q1.z - q2.z) > 1e-5) then return false end
    return true
  end)

  identity = Quat()
  assert(math.abs(1 - identity.w) <= 1e-5)
  assert(math.abs(0 - identity.x) <= 1e-5)
  assert(math.abs(0 - identity.y) <= 1e-5)
  assert(math.abs(0 - identity.z) <= 1e-5)
  assert(math.abs(1 - identity:length()) <= 1e-5)
  assert(math.abs(1 - identity:magnitude()) <= 1e-5)
  x_rotate_10 = Quat.from_axis_angle(Vec3(1, 0, 0), math.rad(10))
  x_rotate_20 = Quat.from_axis_angle(Vec3(1, 0, 0), math.rad(20))
  x_rotate_10_x_2 = x_rotate_10 * x_rotate_10
  assert(x_rotate_10_x_2 == x_rotate_20)
  x_rotate_10_then_20 = x_rotate_10 * x_rotate_20
  x_rotate_20_then_10 = x_rotate_20 * x_rotate_10
  assert(x_rotate_10_then_20 == x_rotate_20_then_10)
end

function M.run()
  for name, test in pairs(tests) do
    local status, err = pcall(test)
    if status then
      Script.log(string.format("'%s' passed.", name))
    else
      Script.log(string.format("'%s' failed (%s)", name, err))
    end
  end
end

return M
