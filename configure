#!/bin/sh

# ===-- configure ----------------------------------------*- mode: Bash -*-=== #
#
#                              __ __     _   _
#                             |  |  |___| |_|_|
#                             |_   _| -_|  _| |
#                               |_| |___|_| |_|
#
#        This file is distributed under the terms described in LICENSE.
#
# ===----------------------------------------------------------------------=== #

set -e

function usage {
  echo "Usage: configure [OPTIONS]"
  echo "Generates a Makefile for the specifed options."
  echo ""
  echo "  --configuration [configuration]   Specify a configuration to use: debug,"
  echo "  --configuration=[configuration]   development, or release."
  echo ""
  echo "  --linkage [linkage]               Specify linkage: dynamic or static. "
  echo "  --linkage=[linkage]"
  echo ""
  echo "  --platform [platform]             Specify a platform to target: windows,"
  echo "  --platform=[platform]             macosx, linux, or bsd."
  echo ""
  echo "  --compiler [compiler]             Specify a compiler to use: msvc, gcc,"
  echo "  --compiler=[compiler]             or clang."
  echo ""
  echo "  --architecture [architecture]     Specify an architecture to target: x86,"
  echo "  --architecture=[architecture]     or x86-64."
  echo ""
  echo "  --help, --usage                   Displays this."
  echo ""
  echo "Report bugs on our issue tracker at:"
  echo " https://github.com/origamicomet/yeti/issues"
  exit 1
}

YETI_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
YETI_BUILD=`pwd`

configuration=${YETI_CONFIG_CONFIGURATION}
linkage=${YETI_CONFIG_LINKAGE}
platform=${YETI_CONFIG_PLATFORM}
compiler=${YETI_CONFIG_COMPILER}
architecture=${YETI_CONFIG_ARCHITECTURE}

while [[ $# > 0 ]]; do
  case "$1" in
    --help)
      usage
      ;;
    --usage)
      usage
      ;;
    --configuration)
      shift;
      configuration=$1
      ;;
    --configuration=*)
      configuration=`echo "$1" | sed 's/^--configuration=//'`
      ;;
    --linkage)
      shift;
      linkage=$1
      ;;
    --linkage=*)
      linkage=`echo "$1" | sed 's/^--linkage=//'`
      ;;
    --platform)
      shift;
      platform=$1
      ;;
    --platform=*)
      platform=`echo "$1" | sed 's/^--platform=//'`
      ;;
    --compiler)
      shift;
      compiler=$1
      ;;
    --compiler=*)
      compiler=`echo "$1" | sed 's/^--compiler=//'`
      ;;
    --architecture)
      shift;
      architecture=$1
      ;;
    --architecture=*)
      architecture=`echo "$1" | sed 's/^--architecture=//'`
      ;;
    *)
      usage
      ;;
  esac
  shift
done

case "$configuration" in
  debug)
    ;;
  development)
    ;;
  release)
    ;;
  *)
    if [[ -z $configuration ]]; then
      echo "Configuration not specified!"
      echo ""
      usage
    else
      echo "Unknown configuration '$configuration'!"
      echo ""
      usage
    fi
    ;;
esac

case "$linkage" in
  static)
    ;;
  dynamic)
    ;;
  *)
    if [[ -z $linkage ]]; then
      echo "Linkage not specified!"
      echo ""
      usage
    else
      echo "Unknown linkage '$linkage'!"
      echo ""
      usage
    fi
    ;;
esac

case "$platform" in
  windows)
    ;;
  macosx)
    ;;
  linux)
    ;;
  bsd)
    ;;
  *)
    if [[ -z $platform ]]; then
      echo "Target platform not specified!"
      echo ""
      usage
    else
      echo "Unknown or unsupported platform '$platform'!"
      echo ""
      echo "If you're trying to target closed platforms, like consoles, please do contact"
      echo "us at <licensing@origamicomet.com> as we may support it, but for obvious"
      echo "reasons cannot open-source the relevant code."
      echo ""
      usage
    fi
    ;;
esac

case "$compiler" in
  msvc)
    ;;
  gcc)
    ;;
  clang)
    ;;
  *)
    if [[ -z $compiler ]]; then
      echo "Compiler not specified!"
      echo ""
      usage
    else
      echo "Unknown or unsupported compiler '$compiler'!"
      echo ""
      usage
    fi
    ;;
esac

case "$architecture" in
  x86)
    ;;
  x86-64)
    ;;
  *)
    if [[ -z $architecture ]]; then
      echo "Target architecture not specified!"
      echo ""
      usage
    else
      echo "Unknown or unsupported architecture '$architecture'!"
      echo ""
      echo "If you're trying to target closed architectures, like Larrabee, please do"
      echo "contact us at <licensing@origamicomet.com> as we may support it, but for"
      echo "obvious reasons cannot open-source the relevant code."
      echo ""
      usage
    fi
    ;;
esac

cat >Makefile <<EOF
# Do not modify this file; it was auto-generated by ${YETI_ROOT}/configure!

export YETI_ROOT := ${YETI_ROOT}
export YETI_BUILD := ${YETI_BUILD}

export YETI_CONFIGURATION := ${configuration}
export YETI_LINKAGE := ${linkage}
export YETI_PLATFORM := ${platform}
export YETI_COMPILER := ${compiler}
export YETI_ARCHITECTURE := ${architecture}

`tail -n +12 "Makefile.in"`
EOF

exit 0
