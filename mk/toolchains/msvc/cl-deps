#!/usr/bin/env ruby

################################################################################
# This file is part of Butane.
#
# Copyright (c) Michael Williams <devbug@bitbyte.ca>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer. Redistributions in binary
# form must reproduce the above copyright notice, this list of conditions and
# the following disclaimer in the documentation and/or other materials provided
# with the distribution. Neither the name of the nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
################################################################################

require 'pathname'

rule = ARGV.select { |arg|
  if arg[0..2] == '-MT'
    true
  else
  end
}[0][3..-1]

input = ARGV.select { |arg|
  if arg[1..-2] =~ /\.(?:c|cc|cpp|cxx|c\+\+)$/i
    true
  else
    false
  end
}[0]

cmd = ARGV.map { |arg|
  if arg[0..1] == '-I'
    '-I"' + arg[2..-1] + '"'
  elsif arg[0..2] == '-Fo'
    '-Fo"' + arg[3..-1] + '"'
  elsif arg[0..2] == '-Fd'
    '-Fd"' + arg[3..-1] + '"'
  elsif arg[0] != '-'
    '"' + arg[0..-1] + '"'
  else
    arg
  end
}.select { |arg|
  if arg[0..2] == '-MT'
    false
  elsif arg[0..2] == '-Zi'
    false
  elsif arg[0..2] == '-Fo'
    false
  elsif arg[0..2] == '-Fd'
    false
  else
    true
  end
}.unshift('cl.exe').join(' ')

output = `#{cmd}`
returned = $?.exitstatus

if returned != 0
  exit false
end

dependencies = output.lines.to_a.select { |line|
  line.start_with? "Note: including file: "
}.map { |line|
  line.sub("Note: including file: ", "").strip
}.select { |line|
  not (line =~ /[a-z]:[\\\/]/i)
}.map { |line|
  line.gsub("\\", "/")
}.uniq

puts "#{rule}: #{input} #{dependencies.join(' ')}"

exit true
