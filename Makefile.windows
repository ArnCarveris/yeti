# ===----------------------------------------------------------------------=== #
#
#  Butane
#
#  Copyright (c) 2012-2014 Bitbyte Studios, Inc.
#
#  Author(s):
#
#    * Michael Williams <mike@bitbyte.ca>
#
#  This software is provided 'as-is', without any express or implied warranty.
#  In no event will the authors be held liable for any damages arising from the
#  use of this software.
#
#  Permission is granted to anyone to use this software for any purpose,
#  including commercial applications, and to alter it and redistribute it
#  freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product in the form of a provided
#     splash screen is required as well as an acknowledgement in the product
#     documentation.
#
#     2. Altered source versions must be plainly marked as such, and must not
#     be misrepresented as being the original software.
#
#     3. Altered versions may not be sublicensed.
#
#     4. This notice may not be removed or altered from any source distribution.
#
# ===----------------------------------------------------------------------=== #

#
# Convenience helpers:
#

windows-to-posix = $(shell echo "$1" | sed 's/\\/\//g' | sed 's/://' | sed 's/^/\//')
posix-to-windows = $(shell echo "$1" | sed 's/^\/./\0:/' | sed 's/^\///' | sed 's/\//\\/g')

#
# Verify that Windows is targetable:
#

ifneq ($(shell $(ROOT)/build/platform.sh),mingw)
  $(error Cannot cross-compile to 'windows' from '$(shell $(ROOT)/build/platform.sh)')
endif

#
# Verify that Microsoft Visual C/C++ exists:
#

ifeq ($(shell $(ROOT)/build/toolchains/msvc.d/available),0)
  $(error Compiliation with 'msvc' is not available on '$(shell $(ROOT)/build/platform.sh)'. \
          The build system was unable to auto-detect Microsoft Visual C/C++ and/or the Windows SDK. \
          Try defining VCInstallDir and/or WindowsSdkDir)
endif

#
# Inject Microsoft Visual C/C++ and the Windows SDK into PATH:
#

VCInstallDir := $(shell $(ROOT)/build/platforms/windows/mingw/VCInstallDir.sh)
WindowsSdkDir := $(shell $(ROOT)/build/platforms/windows/mingw/WindowsSdkDir.sh)

VCInstallDir_ := $(call windows-to-posix,$(VCInstallDir))
WindowsSdkDir_ := $(call windows-to-posix,$(WindowsSdkDir))

# HACK: The Common7/IDE path might not exist in older versions of Microsoft Visual Studio.
CommonTools_ := $(shell readlink -f "$(VCInstallDir_)/../Common7")

ifeq ($(ARCHITECTURE),x86)
  export PATH := $(WindowsSdkDir_)/bin:$(CommonTools_)/IDE:$(VCInstallDir_)/bin:$(PATH)
endif
ifeq ($(ARCHITECTURE),x86-64)
  export PATH := $(WindowsSdkDir_)/bin/x64:$(CommonTools_)/IDE:$(VCInstallDir_)/bin/x86_amd64:$(VCInstallDir_)/bin:$(PATH)
endif

#
# Define CFLAGS, LDFLAGS, and ARFLAGS:
#

CFLAGS  := -nologo -c -favor:blend -GF -GR- -W4
LDFLAGS := -nologo -manifest:embed -LIBPATH:"$(call posix-to-windows,$(BUILD)/bin)" -LIBPATH:"$(call posix-to-windows,$(BUILD)/lib)"
ARFLAGS := -nologo

ifeq ($(ARCHITECTURE),x86)
  CFLAGS += -arch:IA32
  LDFLAGS += -machine:X86
  ARFLAGS += -machine:X86
endif
ifeq ($(ARCHITECTURE),x86-64)
  LDFLAGS += -machine:X64
  ARFLAGS += -machine:X64
endif

ifeq ($(ARCHITECTURE),x86)
  CFLAGS += -I"$(WindowsSdkDir)/Include" -I"$(VCInstallDir)/include"
  LDFLAGS += -LIBPATH:"$(WindowsSdkDir)/Lib" -LIBPATH:"$(VCInstallDir)/Lib"
endif
ifeq ($(ARCHITECTURE),x86-64)
  CFLAGS += -I"$(WindowsSdkDir)/Include" -I"$(VCInstallDir)/include"
  LDFLAGS += -LIBPATH:"$(WindowsSdkDir)/Lib/x64" -LIBPATH:"$(VCInstallDir)/Lib/amd64"
endif

# See http://stackoverflow.com/questions/14363929.
ifeq ($(findstring 12.0,$(VCInstallDir)),12.0)
  CFLAGS += -D"_USING_V110_SDK71_=1"
endif

ifeq ($(CONFIGURATION),debug)
  CFLAGS += -MDd -Od -Zi -RTCsu -fp:precise -fp:except -D_DEBUG
  CFLAGS += -DBITBYTE_BUTANE_CONFIGURATION=BITBYTE_BUTANE_CONFIGURATION_DEBUG
  CFLAGS += -DBITBYTE_FOUNDATION_CONFIGURATION=BITBYTE_FOUNDATION_CONFIGURATION_DEBUG
  LDFLAGS += -DEBUG
  ARFLAGS +=
endif
ifeq ($(CONFIGURATION),development)
  CFLAGS += -MD -Zi -fp:fast -fp:except- -D_NDEBUG
  CFLAGS += -DBITBYTE_BUTANE_CONFIGURATION=BITBYTE_BUTANE_CONFIGURATION_DEVELOPMENT
  CFLAGS += -DBITBYTE_FOUNDATION_CONFIGURATION=BITBYTE_FOUNDATION_CONFIGURATION_DEVELOPMENT
  LDFLAGS += -DEBUG
  ARFLAGS +=
endif
ifeq ($(CONFIGURATION),release)
  CFLAGS += -MD -GL -Ox -fp:fast -fp:except- -D_NDEBUG
  CFLAGS += -DBITBYTE_BUTANE_CONFIGURATION=BITBYTE_BUTANE_CONFIGURATION_RELEASE
  CFLAGS += -DBITBYTE_FOUNDATION_CONFIGURATION=BITBYTE_FOUNDATION_CONFIGURATION_RELEASE
  LDFLAGS += -LTCG
  ARFLAGS += -LTCG
endif

ifeq ($(LINKAGE),static)
  CFLAGS += -DBITBYTE_BUTANE_LINKAGE=BITBYTE_BUTANE_STATIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER0_LINKAGE=BITBYTE_FOUNDATION_TIER0_STATIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER1_LINKAGE=BITBYTE_FOUNDATION_TIER1_STATIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER2_LINKAGE=BITBYTE_FOUNDATION_TIER2_STATIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER3_LINKAGE=BITBYTE_FOUNDATION_TIER3_STATIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER4_LINKAGE=BITBYTE_FOUNDATION_TIER4_STATIC_LINKAGE
endif
ifeq ($(LINKAGE),dynamic)
  CFLAGS += -DBITBYTE_BUTANE_LINKAGE=BITBYTE_BUTANE_DYNAMIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER0_LINKAGE=BITBYTE_FOUNDATION_TIER0_DYNAMIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER1_LINKAGE=BITBYTE_FOUNDATION_TIER1_DYNAMIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER2_LINKAGE=BITBYTE_FOUNDATION_TIER2_DYNAMIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER3_LINKAGE=BITBYTE_FOUNDATION_TIER3_DYNAMIC_LINKAGE
  CFLAGS += -DBITBYTE_FOUNDATION_TIER4_LINKAGE=BITBYTE_FOUNDATION_TIER4_DYNAMIC_LINKAGE
endif

CFLAGS += -I"$(call posix-to-windows,$(FOUNDATION)/include)"
LDFLAGS += -LIBPATH:"$(call posix-to-windows,$(FOUNDATION_BUILD)/bin)" -LIBPATH:"$(call posix-to-windows,$(FOUNDATION_BUILD)/lib)"

#
# Rules:
#

BUTANE_SOURCES := $(shell find $(ROOT)/src/bitbyte/butane -name '*.c')
BUTANE_OBJECTS := $(subst $(ROOT)/src/,$(BUILD)/obj/,$(BUTANE_SOURCES:%.c=%.obj))
BUTANE_OBJECTS += $(BUILD)/obj/bitbyte/butane.obj

-include $(BUTANE_OBJECTS:%.obj=%.d)

$(BUILD)/obj/bitbyte/butane/%.obj: $(ROOT)/src/bitbyte/butane/%.c
	@echo "[CC] $<"
	@mkdir -p ${@D}
	@$(ROOT)/build/toolchains/msvc.d/cl -TP $(CFLAGS) -I"$(call posix-to-windows,$(ROOT)/include)" -DBITBYTE_BUTANE_COMPILING=3 -Fo"$(call posix-to-windows,$@)" -Fd"$(call posix-to-windows,$(patsubst %.obj,%.pdb,$@))" "$<"
	@$(ROOT)/build/toolchains/msvc.d/cl -TP $(CFLAGS) -I"$(call posix-to-windows,$(ROOT)/include)" -DBITBYTE_BUTANE_COMPILING=3 "$<" -MM -MT $@ >$(patsubst %.obj,%.d,$@)

$(BUILD)/obj/bitbyte/butane.obj: $(ROOT)/src/bitbyte/butane.c
	@echo "[CC] $<"
	@mkdir -p ${@D}
	@$(ROOT)/build/toolchains/msvc.d/cl -TP $(CFLAGS) -I"$(call posix-to-windows,$(ROOT)/include)" -DBITBYTE_BUTANE_COMPILING=3 -Fo"$(call posix-to-windows,$@)" -Fd"$(call posix-to-windows,$(patsubst %.obj,%.pdb,$@))" "$<"
	@$(ROOT)/build/toolchains/msvc.d/cl -TP $(CFLAGS) -I"$(call posix-to-windows,$(ROOT)/include)" -DBITBYTE_BUTANE_COMPILING=3 "$<" -MM -MT $@ >$(patsubst %.obj,%.d,$@)

ifeq ($(LINKAGE),static)
$(BUILD)/lib/butane.lib: $(BUTANE_OBJECTS)
	@echo "[AR] $@"
	@mkdir -p ${@D}
	@lib $(ARFLAGS) -OUT:"$(call posix-to-windows,$@)" $(foreach obj,$(BUTANE_OBJECTS),"$(call posix-to-windows,$(obj))")

butane: foundation $(BUILD)/lib/butane.lib
endif
ifeq ($(LINKAGE),dynamic)
$(BUILD)/bin/butane.dll: $(BUTANE_OBJECTS)
	@echo "[LD] $@"
	@mkdir -p ${@D}
	@link -DLL $(LDFLAGS) -OUT:"$(call posix-to-windows,$@)" tier0.lib tier1.lib tier2.lib tier3.lib tier4.lib dbghelp.lib kernel32.lib user32.lib gdi32.lib $(foreach obj,$(BUTANE_OBJECTS),"$(call posix-to-windows,$(obj))")

$(BUILD)/lib/butane.lib: $(BUILD)/bin/butane.dll
	@echo "[AR] $@"
	@mkdir -p ${@D}
	@-mv -f -u $(basename $<).lib $@

butane: foundation $(BUILD)/bin/butane.dll $(BUILD)/lib/butane.lib
endif

package-butane: butane
	@mkdir -p $(BUILD)/pkg
	@-cp $(FOUNDATION_BUILD)/pkg/* $(BUILD)/pkg/
	@-cp $(BUILD)/bin/*.dll $(BUILD)/pkg/
	@-cp $(BUILD)/bin/*.pdb $(BUILD)/pkg/
