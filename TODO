- Extract mouse buttons and mouse axes into an include file?
- Respect keyboard layouts?
- Use WM_CHAR and friends for textual input.
- Install a sophisticated assertion handler.
- Install a sophisticated error handler for exceptions, signals, and such.
- Implement Keyboard::connected() and Mouse::connected().
- Implement Window::mouse_focus() and Window::set_mouse_focus().
- Actually generate events in Window::update() for consumption by |event_handler|.
- Implement standard and custom cursors via Window::cursor() and Window::set_cursor().
- Update MouseAxes::ABSOLUTE and MouseAxes::RELATIVE upon raw-input? We'll have to manually translate GetCursorPos to a window-relative point.
- Make allocation tracking thread-safe.
- Optimize allocation tracking via a different strategy. Refer to the EASTL talk that describes the use arenas.
- Default application icon based on the Yeti logo.
- Determine the best approach to using a user-provided icon. Check my Github stars for that resource editor/embedding library. Or just load based on a manifest setting?
